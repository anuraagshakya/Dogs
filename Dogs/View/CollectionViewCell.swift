//
//  CollectionViewCell.swift
//  Dogs
//
//  Created by Anuraag Shakya on 31.07.18.
//  Copyright Â© 2018 Bhunte. All rights reserved.
//

import UIKit

class CollectionViewCell: UICollectionViewCell {
    
    @IBOutlet weak var imageView: UIImageView!
    
    // Variable to store URLSessionTask we use to fetch the cell's image.
    var task: URLSessionTask?
    
    // urlString parameter that holds the image URL. When set, it checks the
    //  imageCache and if image has already be loaded and set it from the cache.
    //  Else, it will load it from URL.
    var urlString: String! {
        didSet {
            self.imageView.image = nil
            if let imageFromCache = imageCache.object(forKey: urlString as NSString) {
                self.imageView.image = imageFromCache
                return
            }
            fetchImageFromUrl(self.urlString)
        }
    }
    
    // Function to return currently showing image
    func currentlyShowingImage() -> UIImage? {
        return imageView.image
    }

    // Loads Image from URL when url is set
    private func fetchImageFromUrl(_ urlString: String) {
        guard let url = URL(string: urlString) else {
            print("Invalid image URL \(urlString)")
            return
        }
        
        // Cancel any previous image fetching task. Then create a new task to
        //  fetch current image.
        task?.cancel()
        task = URLSession.shared.dataTask(with: url) { (data, response, error) in
            
            guard let data = data, error == nil else {
                // Print all error codes except those generated by cancelling
                //  a URLSessionTask so that it does not spam the debug output.
                if error!._code != -999 {
                    let customError = ErrorResult.network(string: error!.localizedDescription)
                    print(customError.description())
                }
                return
            }
            
            // Save image to cache and set the cell's image to what we get from
            //  url on main queue
            DispatchQueue.main.async {
                let imageToCache = UIImage(data: data)
                imageCache.setObject(imageToCache!, forKey: urlString as NSString)
                self.imageView.image = imageToCache
            }
        }
        task!.resume()
    }
    
}
